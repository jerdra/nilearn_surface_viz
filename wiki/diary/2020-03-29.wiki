= Day 1: Initial Tool Building - 2020-03-29 =
:software-development:neuroimaging:


== Day Plan ==
* Build and Explore functionality to construct .svg outputs from nilearn on both surface-based data and volume-based data. The idea is to explore how these interfaces work so that we can abstract away the implementation from the user
* Play around with Jinja templating and how css styles/javascript (anime.js?) interact with the images created from nilearn. Hopefully we'll be able to accomplish the following goals:
	* Chain together multiple images with descriptions headings, captions, legends
	* Apply composable transitions and overlays with the images.
* Think a bit about how we plan for the user to interact with the software on a few levels:
	* The YAML specification of pipeline outputs
	* User-specified styling? How can this be accomplished?
	* Level of abstraction required for other developers to push new visualization module

== Plotting Surfaces and Volume Data in Nilearn ==

=== Loading in GIFTI Surface Files ===
GIFTI files can be loaded simply through nilearn's `surface.load_surf_mesh` functionality. However, some CIFTI files cannot be directly loaded using nilearn, instead you need to use Nibabel to handle data ingestion.

=== Loading in CIFTI Surface Files ===

There exist a class of CIFTI files which contain less than the expected number of vertices (~32k/hemisphere) and this is due to the exclusion of the medial wall. To get around this we need the indices of the vertices of the medial wall since some vertices are unset.

With a bit of experimenting with Nibabel's API it seems that we can access some vertex-information with the following lengthy set of calls:

* `Cifti2Image.header.get_index_map(1).brain_models` yields a generator object, typically with 2-3 items depending on whether subcortical regions are included
* Each item in the iterator is a `Cifti2BrainModel`, which may correspond to subcortical, left, or right hemispheres. These objects have the following useful properties:
	* `brain_structure`: yields the CIFTI_STRUCTURE[_NAME...] string
	* index_count: number of indices to expect for this brain model
	* index_offset: index # of first element in brain model
	* surface_number_of_vertices: number of vertices of associated surface model (i.e: fsaverage_LR32K contains 32492 vertices/hemisphere)
* The most important property is `vertex_indices` which contains the `Cifti2VertexIndices` container object.
	* The length of this container matches `index_count`.
	* As a container using `np.array`, `list` both will yield the list of vertex IDs

==== Working Method ====

1. `nib.load(path_to_cifti)` will yield the `Cifti2Image`
2. `np.asanyarray(Cifti2Image.dataobj)` will yield the array of data values of length `index_count`
3. It is possible that the `index_count` will not match the number of vertices in the associated surface. In this case, it is usually because some values are left un-filled - such as the medial wall.
4. The workaround here is to perform the following set of operations
	i) `Cifti2Image.header.get_index_map([0: MAPS, 1: ROWS])`
	ii) `list(Cifti2MatrixIndicesMap.brain_models)` will yield a number of `Cifti2BrainModel` objects
	iii) `np.array(Cifti2BrainModel.vertex_indices)`

With the above objects set up, we can now create the final matrix:

{{{python
	vertices = np.zeros(2 * Cifti2BrainModel.surface_number_of_vertices)
	vertices[ np.array(Cifti2BrainModel.vertex_indices) +
			  Cifti2BrainModel.index_offset ] =
			  np.asanyarray(Cifti2Image.dataobj)
}}}

This will fill in the associated hemisphere's part of the full bilateral surface array.

